import pyperf
from sqlglot.lineage import lineage
from sqlglot.optimizer.qualify import qualify
from sqlglot import parse_one
from sqlglot.optimizer.scope import build_scope


complex_cte_query = "WITH dataset1 AS (WITH base_data AS ((((((((((((((((((((((((((((SELECT period_col, group_col, 'Primary Data Point (Modified)' AS category_col, primary_data_point_modified AS value_col, 101 AS order_col, 'L0' AS type_col, 'normal' AS style_col FROM main_table) UNION ALL (SELECT period_col, group_col, 'Secondary Adjustment' AS category_col, secondary_adjustment AS value_col, NULL AS order_col, 'L0' AS type_col, 'normal' AS style_col FROM main_table)) UNION ALL (SELECT period_col, group_col, 'Tertiary Modifier' AS category_col, tertiary_modifier AS value_col, NULL AS order_col, 'L0' AS type_col, 'normal' AS style_col FROM main_table)) UNION ALL (SELECT period_col, group_col, 'Total Base Amount' AS category_col, total_base_amount AS value_col, 103 AS order_col, 'L0' AS type_col, 'normal' AS style_col FROM main_table)) UNION ALL (SELECT period_col, group_col, 'Credit Units' AS category_col, credit_units AS value_col, 104 AS order_col, 'L0' AS type_col, 'normal' AS style_col FROM main_table)) UNION ALL (SELECT period_col, group_col, 'Discount Value' AS category_col, discount_value AS value_col, 105 AS order_col, 'L0' AS type_col, 'normal' AS style_col FROM main_table)) UNION ALL (SELECT period_col, group_col, 'Modified Returns' AS category_col, modified_returns AS value_col, NULL AS order_col, 'L0' AS type_col, 'normal' AS style_col FROM main_table)) UNION ALL (SELECT period_col, group_col, 'Additional Income' AS category_col, additional_income AS value_col, 202 AS order_col, 'L0' AS type_col, 'normal' AS style_col FROM main_table)) UNION ALL (SELECT period_col, group_col, 'Service and Transport Income' AS category_col, service_and_transport_income AS value_col, NULL AS order_col, 'L0' AS type_col, 'normal' AS style_col FROM main_table)) UNION ALL (SELECT period_col, group_col, 'Primary Resource Costs' AS category_col, primary_resource_costs AS value_col, 301 AS order_col, 'L0' AS type_col, 'normal' AS style_col FROM main_table)) UNION ALL (SELECT period_col, group_col, 'Variance & Control Costs' AS category_col, variance_control_costs AS value_col, NULL AS order_col, 'L0' AS type_col, 'normal' AS style_col FROM main_table)) UNION ALL (SELECT period_col, group_col, 'Additional Costs/Overhead' AS category_col, 0 AS value_col, NULL AS order_col, 'L0' AS type_col, 'normal' AS style_col FROM main_table)) UNION ALL (SELECT period_col, group_col, 'Usage Fees - Type A' AS category_col, usage_fees_type_a AS value_col, 311 AS order_col, 'L0' AS type_col, 'normal' AS style_col FROM main_table)) UNION ALL (SELECT period_col, group_col, 'Usage Fees - Type B' AS category_col, usage_fees_type_b AS value_col, 312 AS order_col, 'L0' AS type_col, 'normal' AS style_col FROM main_table)) UNION ALL (SELECT period_col, group_col, 'Platform Charges' AS category_col, platform_charges AS value_col, NULL AS order_col, 'L0' AS type_col, 'normal' AS style_col FROM main_table)) UNION ALL (SELECT period_col, group_col, 'External Service Charges' AS category_col, external_service_charges AS value_col, NULL AS order_col, 'L0' AS type_col, 'normal' AS style_col FROM main_table)) UNION ALL (SELECT period_col, group_col, 'Inbound Transport' AS category_col, inbound_transport AS value_col, 331 AS order_col, 'L0' AS type_col, 'normal' AS style_col FROM main_table)) UNION ALL (SELECT period_col, group_col, 'Outbound Transport' AS category_col, outbound_transport AS value_col, 332 AS order_col, 'L0' AS type_col, 'normal' AS style_col FROM main_table)) UNION ALL (SELECT period_col, group_col, 'Operations Expense - General' AS category_col, 0 AS value_col, 340 AS order_col, 'L0' AS type_col, 'normal' AS style_col FROM main_table)) UNION ALL (SELECT period_col, group_col, 'Return Processing (Simplified)' AS category_col, return_processing_simplified AS value_col, 350 AS order_col, 'L0' AS type_col, 'normal' AS style_col FROM main_table)) UNION ALL (SELECT period_col, group_col, 'Order Management' AS category_col, order_management AS value_col, 501 AS order_col, 'L0' AS type_col, 'normal' AS style_col FROM main_table)) UNION ALL (SELECT period_col, group_col, 'Client Support' AS category_col, client_support AS value_col, NULL AS order_col, 'L0' AS type_col, 'normal' AS style_col FROM main_table)) UNION ALL (SELECT period_col, group_col, 'Item Administration' AS category_col, item_administration AS value_col, NULL AS order_col, 'L0' AS type_col, 'normal' AS style_col FROM main_table)) UNION ALL (SELECT period_col, group_col, 'Transaction Fees' AS category_col, transaction_fees AS value_col, NULL AS order_col, 'L0' AS type_col, 'normal' AS style_col FROM main_table)) UNION ALL (SELECT period_col, group_col, 'Promotion Online' AS category_col, 0 AS value_col, 511 AS order_col, 'L0' AS type_col, 'normal' AS style_col FROM main_table)) UNION ALL (SELECT period_col, group_col, 'Promotion Offline' AS category_col, promotion_offline AS value_col, 512 AS order_col, 'L0' AS type_col, 'normal' AS style_col FROM main_table)) UNION ALL (SELECT period_col, group_col, 'Partner Share - Type A' AS category_col, partner_share_type_a AS value_col, 521 AS order_col, 'L0' AS type_col, 'normal' AS style_col FROM main_table)) UNION ALL (SELECT period_col, group_col, 'Partner Share - Type B' AS category_col, partner_share_type_b AS value_col, 522 AS order_col, 'L0' AS type_col, 'normal' AS style_col FROM main_table)), level1_data AS ((((((((((SELECT period_col, group_col, 'Combined Adjustments' AS category_col, sum(CASE WHEN ((category_col = 'Secondary Adjustment')) THEN (value_col) WHEN ((category_col = 'Tertiary Modifier')) THEN (value_col) ELSE 0 END) AS value_col, 102 AS order_col, 'L1' AS type_col, 'normal' AS style_col FROM base_data GROUP BY period_col, group_col) UNION ALL (SELECT period_col, group_col, 'Returns (Simplified)' AS category_col, -(sum(CASE WHEN ((category_col = 'Modified Returns')) THEN (value_col) ELSE 0 END)) AS value_col, 201 AS order_col, 'L1' AS type_col, 'normal' AS style_col FROM base_data GROUP BY period_col, group_col)) UNION ALL (SELECT period_col, group_col, 'Service and Transport Income (Simplified)' AS category_col, sum(CASE WHEN ((category_col = 'Service and Transport Income')) THEN (value_col) ELSE 0 END) AS value_col, 203 AS order_col, 'L1' AS type_col, 'normal' AS style_col FROM base_data GROUP BY period_col, group_col)) UNION ALL (SELECT period_col, group_col, 'Variance / Additional Costs' AS category_col, sum(CASE WHEN ((category_col = 'Variance & Control Costs')) THEN (value_col) WHEN ((category_col = 'Additional Costs/Overhead')) THEN (value_col) ELSE 0 END) AS value_col, 302 AS order_col, 'L1' AS type_col, 'normal' AS style_col FROM base_data GROUP BY period_col, group_col)) UNION ALL (SELECT period_col, group_col, 'Usage Fees Combined' AS category_col, sum(CASE WHEN ((category_col = 'Usage Fees - Type A')) THEN (value_col) WHEN ((category_col = 'Usage Fees - Type B')) THEN (value_col) ELSE 0 END) AS value_col, 310 AS order_col, 'L1' AS type_col, 'normal' AS style_col FROM base_data GROUP BY period_col, group_col)) UNION ALL (SELECT period_col, group_col, 'Platform / External Service Charges' AS category_col, sum(CASE WHEN ((category_col = 'Platform Charges')) THEN (value_col) WHEN ((category_col = 'External Service Charges')) THEN (value_col) ELSE 0 END) AS value_col, 320 AS order_col, 'L1' AS type_col, 'normal' AS style_col FROM base_data GROUP BY period_col, group_col)) UNION ALL (SELECT period_col, group_col, 'Transport Combined' AS category_col, sum(CASE WHEN ((category_col = 'Inbound Transport')) THEN (value_col) WHEN ((category_col = 'Outbound Transport')) THEN (value_col) ELSE 0 END) AS value_col, 330 AS order_col, 'L1' AS type_col, 'normal' AS style_col FROM base_data GROUP BY period_col, group_col)) UNION ALL (SELECT period_col, group_col, 'Client Support/Item Admin/Transaction' AS category_col, sum(CASE WHEN ((category_col = 'Client Support')) THEN (value_col) WHEN ((category_col = 'Item Administration')) THEN (value_col) WHEN ((category_col = 'Transaction Fees')) THEN (value_col) ELSE 0 END) AS value_col, 502 AS order_col, 'L1' AS type_col, 'normal' AS style_col FROM base_data GROUP BY period_col, group_col)) UNION ALL (SELECT period_col, group_col, 'Promotion/Advertising' AS category_col, sum(CASE WHEN ((category_col = 'Promotion Online')) THEN (value_col) WHEN ((category_col = 'Promotion Offline')) THEN (value_col) ELSE 0 END) AS value_col, 510 AS order_col, 'L1' AS type_col, 'normal' AS style_col FROM base_data GROUP BY period_col, group_col)) UNION ALL (SELECT period_col, group_col, 'Partner Share Combined' AS category_col, sum(CASE WHEN ((category_col = 'Partner Share - Type A')) THEN (value_col) WHEN ((category_col = 'Partner Share - Type B')) THEN (value_col) ELSE 0 END) AS value_col, 520 AS order_col, 'L1' AS type_col, 'normal' AS style_col FROM base_data GROUP BY period_col, group_col)), merged_data AS ((SELECT * FROM base_data) UNION ALL (SELECT * FROM level1_data)), level2_data AS ((((SELECT period_col, group_col, 'Net Base Amount (Simplified)' AS category_col, sum(CASE WHEN ((category_col = 'Total Base Amount')) THEN (value_col) WHEN ((category_col = 'Credit Units')) THEN (value_col) WHEN ((category_col = 'Discount Value')) THEN (value_col) ELSE 0 END) AS value_col, 199 AS order_col, 'L2' AS type_col, 'bold' AS style_col FROM merged_data GROUP BY period_col, group_col) UNION ALL (SELECT period_col, group_col, 'Total Income' AS category_col, sum(CASE WHEN ((category_col = 'Net Base Amount (Simplified)')) THEN (value_col) WHEN ((category_col = 'Returns (Simplified)')) THEN (value_col) WHEN ((category_col = 'Additional Income')) THEN (value_col) WHEN ((category_col = 'Service and Transport Income (Simplified)')) THEN (value_col) ELSE 0 END) AS value_col, 299 AS order_col, 'L2' AS type_col, 'bold' AS style_col FROM ((SELECT * FROM merged_data) UNION ALL (SELECT period_col, group_col, 'Net Base Amount (Simplified)' AS category_col, sum(CASE WHEN ((category_col = 'Total Base Amount')) THEN (value_col) WHEN ((category_col = 'Credit Units')) THEN (value_col) WHEN ((category_col = 'Discount Value')) THEN (value_col) ELSE 0 END) AS value_col, 199 AS order_col, 'L2' AS type_col, 'bold' AS style_col FROM merged_data GROUP BY period_col, group_col)) AS temp_table GROUP BY period_col, group_col)) UNION ALL (SELECT period_col, group_col, 'Total Resource Costs' AS category_col, sum(CASE WHEN ((category_col = 'Primary Resource Costs')) THEN (value_col) WHEN ((category_col = 'Variance / Additional Costs')) THEN (value_col) WHEN ((category_col = 'Usage Fees Combined')) THEN (value_col) WHEN ((category_col = 'Platform / External Service Charges')) THEN (value_col) WHEN ((category_col = 'Transport Combined')) THEN (value_col) WHEN ((category_col = 'Operations Expense - General')) THEN (value_col) WHEN ((category_col = 'Return Processing (Simplified)')) THEN (value_col) ELSE 0 END) AS value_col, 399 AS order_col, 'L2' AS type_col, 'bold' AS style_col FROM merged_data GROUP BY period_col, group_col)) UNION ALL (SELECT period_col, group_col, 'Base Item Margin $' AS category_col, sum(CASE WHEN ((category_col = 'Net Base Amount (Simplified)')) THEN (value_col) WHEN ((category_col = 'Primary Resource Costs')) THEN (value_col) ELSE 0 END) AS value_col, 401 AS order_col, 'L2' AS type_col, 'italic' AS style_col FROM ((SELECT * FROM merged_data) UNION ALL (SELECT period_col, group_col, 'Net Base Amount (Simplified)' AS category_col, sum(CASE WHEN ((category_col = 'Total Base Amount')) THEN (value_col) WHEN ((category_col = 'Credit Units')) THEN (value_col) WHEN ((category_col = 'Discount Value')) THEN (value_col) ELSE 0 END) AS value_col, 199 AS order_col, 'L2' AS type_col, 'bold' AS style_col FROM merged_data GROUP BY period_col, group_col)) AS temp_table GROUP BY period_col, group_col)), final_data AS (((((SELECT * FROM merged_data) UNION ALL (SELECT * FROM level2_data)) UNION ALL (SELECT a.period_col, a.group_col, 'Performance Ratio %' AS category_col, CASE WHEN ((b.value_col = 0)) THEN (NULL) ELSE ((a.value_col + b.value_col) / b.value_col) END AS value_col, 402 AS order_col, 'L2' AS type_col, 'italic' AS style_col FROM (SELECT period_col, group_col, sum(CASE WHEN ((category_col = 'Total Income')) THEN (value_col) ELSE 0 END) AS value_col FROM ((SELECT * FROM merged_data) UNION ALL (SELECT * FROM level2_data)) AS all_data GROUP BY period_col, group_col) AS b INNER JOIN (SELECT period_col, group_col, sum(CASE WHEN ((category_col = 'Total Resource Costs')) THEN (value_col) ELSE 0 END) AS value_col FROM ((SELECT * FROM merged_data) UNION ALL (SELECT * FROM level2_data)) AS all_data GROUP BY period_col, group_col) AS a ON (((a.period_col = b.period_col) AND (a.group_col = b.group_col))))) UNION ALL (SELECT period_col, group_col, 'Overall Profit' AS category_col, sum(CASE WHEN ((category_col = 'Total Income')) THEN (value_col) WHEN ((category_col = 'Total Resource Costs')) THEN (value_col) ELSE 0 END) AS value_col, 499 AS order_col, 'L2' AS type_col, 'bold' AS style_col FROM ((SELECT * FROM merged_data) UNION ALL (SELECT * FROM level2_data)) AS temp_table GROUP BY period_col, group_col)) UNION ALL (SELECT period_col, group_col, 'Total Variable Expenses' AS category_col, sum(CASE WHEN ((category_col = 'Order Management')) THEN (value_col) WHEN ((category_col = 'Client Support/Item Admin/Transaction')) THEN (value_col) WHEN ((category_col = 'Promotion/Advertising')) THEN (value_col) WHEN ((category_col = 'Partner Share Combined')) THEN (value_col) ELSE 0 END) AS value_col, 599 AS order_col, 'L2' AS type_col, 'bold' AS style_col FROM merged_data GROUP BY period_col, group_col)), variable_margin AS (SELECT period_col, group_col, 'Variable Contribution Result' AS category_col, sum(CASE WHEN ((category_col = 'Overall Profit')) THEN (value_col) WHEN ((category_col = 'Total Variable Expenses')) THEN (value_col) ELSE 0 END) AS value_col, 650 AS order_col, 'L2' AS type_col, 'bold' AS style_col FROM final_data GROUP BY period_col, group_col)(SELECT * FROM final_data) UNION ALL (SELECT * FROM variable_margin) ORDER BY period_col, group_col, order_col)SELECT _summary.period_col AS period_col, _summary.group_col AS group_col, _summary.category_col AS category_col, _summary.value_col AS value_col, _summary.order_col AS order_col, _summary.type_col AS type_col, _summary.style_col AS style_col FROM dataset1 AS _summary;"



simple_query = "SELECT * FROM table1"

nested_subqueries = """
SELECT a.id, 
       (SELECT MAX(b.value) 
        FROM table2 b 
        WHERE b.id = a.id AND 
              b.date IN (SELECT c.date 
                        FROM table3 c 
                        WHERE c.status = 'active')) as max_value
FROM table1 a
WHERE EXISTS (SELECT 1 
              FROM table4 d 
              WHERE d.ref_id = a.id)
"""

def parse_and_build_scope(sql):
    """Parse SQL and build scope tree"""
    try:
        ast = parse_one(sql, dialect="duckdb")
        qualify(
            ast,
            schema={},
            validate_qualify_columns=False,            
            identify=False,
            dialect="duckdb"
        )
        scope = build_scope(ast)

        lineage(
            column="period_col",
            sql=ast,
            schema={},
            scope=scope,    
        )
    except Exception as e:
        print(f"Error building scope: {e}")
        return 0


def run_benchmarks():
    runner = pyperf.Runner()
    
    runner.bench_func('build_scope_complex_cte', parse_and_build_scope, complex_cte_query)
    # runner.bench_func('build_scope_simple_query', parse_and_build_scope, simple_query)
    # runner.bench_func('build_scope_nested_subqueries', parse_and_build_scope, nested_subqueries)


if __name__ == "__main__":
    run_benchmarks()
