use pyo3::prelude::*;
use strum_macros::EnumString;

#[allow(non_camel_case_types, dead_code)]
#[derive(Copy, Clone, Debug, Hash, PartialEq, Eq, EnumString)]
#[pyclass]
pub enum TokenType {
    L_PAREN,
    R_PAREN,
    L_BRACKET,
    R_BRACKET,
    L_BRACE,
    R_BRACE,
    COMMA,
    DOT,
    DASH,
    PLUS,
    COLON,
    DCOLON,
    DQMARK,
    SEMICOLON,
    STAR,
    BACKSLASH,
    SLASH,
    LT,
    LTE,
    GT,
    GTE,
    NOT,
    EQ,
    NEQ,
    NULLSAFE_EQ,
    COLON_EQ,
    AND,
    OR,
    AMP,
    DPIPE,
    PIPE,
    CARET,
    TILDA,
    ARROW,
    DARROW,
    FARROW,
    HASH,
    HASH_ARROW,
    DHASH_ARROW,
    LR_ARROW,
    DAT,
    LT_AT,
    AT_GT,
    DOLLAR,
    PARAMETER,
    SESSION_PARAMETER,
    DAMP,
    XOR,
    DSTAR,

    BLOCK_START,
    BLOCK_END,

    SPACE,
    BREAK,

    STRING,
    NUMBER,
    IDENTIFIER,
    DATABASE,
    COLUMN,
    COLUMN_DEF,
    SCHEMA,
    TABLE,
    VAR,
    BIT_STRING,
    HEX_STRING,
    BYTE_STRING,
    NATIONAL_STRING,
    RAW_STRING,
    HEREDOC_STRING,

    // types
    BIT,
    BOOLEAN,
    TINYINT,
    UTINYINT,
    SMALLINT,
    USMALLINT,
    MEDIUMINT,
    UMEDIUMINT,
    INT,
    UINT,
    BIGINT,
    UBIGINT,
    INT128,
    UINT128,
    INT256,
    UINT256,
    FLOAT,
    DOUBLE,
    DECIMAL,
    UDECIMAL,
    BIGDECIMAL,
    CHAR,
    NCHAR,
    VARCHAR,
    NVARCHAR,
    TEXT,
    MEDIUMTEXT,
    LONGTEXT,
    MEDIUMBLOB,
    LONGBLOB,
    TINYBLOB,
    TINYTEXT,
    BINARY,
    VARBINARY,
    JSON,
    JSONB,
    TIME,
    TIMETZ,
    TIMESTAMP,
    TIMESTAMPTZ,
    TIMESTAMPLTZ,
    TIMESTAMP_S,
    TIMESTAMP_MS,
    TIMESTAMP_NS,
    DATETIME,
    DATETIME64,
    DATE,
    INT4RANGE,
    INT4MULTIRANGE,
    INT8RANGE,
    INT8MULTIRANGE,
    NUMRANGE,
    NUMMULTIRANGE,
    TSRANGE,
    TSMULTIRANGE,
    TSTZRANGE,
    TSTZMULTIRANGE,
    DATERANGE,
    DATEMULTIRANGE,
    UUID,
    GEOGRAPHY,
    NULLABLE,
    GEOMETRY,
    HLLSKETCH,
    HSTORE,
    SUPER,
    SERIAL,
    SMALLSERIAL,
    BIGSERIAL,
    XML,
    YEAR,
    UNIQUEIDENTIFIER,
    USERDEFINED,
    MONEY,
    SMALLMONEY,
    ROWVERSION,
    IMAGE,
    VARIANT,
    OBJECT,
    INET,
    IPADDRESS,
    IPPREFIX,
    ENUM,
    ENUM8,
    ENUM16,
    FIXEDSTRING,
    LOWCARDINALITY,
    NESTED,
    UNKNOWN,

    // keywords
    ALIAS,
    ALTER,
    ALWAYS,
    ALL,
    ANTI,
    ANY,
    APPLY,
    ARRAY,
    ASC,
    ASOF,
    AUTO_INCREMENT,
    BEGIN,
    BETWEEN,
    CACHE,
    CASE,
    CHARACTER_SET,
    CLUSTER_BY,
    COLLATE,
    COMMAND,
    COMMENT,
    COMMIT,
    CONNECT_BY,
    CONSTRAINT,
    CREATE,
    CROSS,
    CUBE,
    CURRENT_DATE,
    CURRENT_DATETIME,
    CURRENT_TIME,
    CURRENT_TIMESTAMP,
    CURRENT_USER,
    DEFAULT,
    DELETE,
    DESC,
    DESCRIBE,
    DICTIONARY,
    DISTINCT,
    DISTRIBUTE_BY,
    DIV,
    DROP,
    ELSE,
    END,
    ESCAPE,
    EXCEPT,
    EXECUTE,
    EXISTS,
    FALSE,
    FETCH,
    FILTER,
    FINAL,
    FIRST,
    FOR,
    FORCE,
    FOREIGN_KEY,
    FORMAT,
    FROM,
    FULL,
    FUNCTION,
    GLOB,
    GLOBAL,
    GROUP_BY,
    GROUPING_SETS,
    HAVING,
    HINT,
    IGNORE,
    ILIKE,
    ILIKE_ANY,
    IN,
    INDEX,
    INNER,
    INSERT,
    INTERSECT,
    INTERVAL,
    INTO,
    INTRODUCER,
    IRLIKE,
    IS,
    ISNULL,
    JOIN,
    JOIN_MARKER,
    KEEP,
    KILL,
    LANGUAGE,
    LATERAL,
    LEFT,
    LIKE,
    LIKE_ANY,
    LIMIT,
    LOAD,
    LOCK,
    MAP,
    MATCH_RECOGNIZE,
    MEMBER_OF,
    MERGE,
    MOD,
    MODEL,
    NATURAL,
    NEXT,
    NOTNULL,
    NULL,
    OBJECT_IDENTIFIER,
    OFFSET,
    ON,
    OPERATOR,
    ORDER_BY,
    ORDERED,
    ORDINALITY,
    OUTER,
    OVER,
    OVERLAPS,
    OVERWRITE,
    PARTITION,
    PARTITION_BY,
    PERCENT,
    PIVOT,
    PLACEHOLDER,
    PRAGMA,
    PRIMARY_KEY,
    PROCEDURE,
    PROPERTIES,
    PSEUDO_TYPE,
    QUALIFY,
    QUOTE,
    RANGE,
    RECURSIVE,
    REFRESH,
    REPLACE,
    RETURNING,
    REFERENCES,
    RIGHT,
    RLIKE,
    ROLLBACK,
    ROLLUP,
    ROW,
    ROWS,
    SELECT,
    SEMI,
    SEPARATOR,
    SERDE_PROPERTIES,
    SET,
    SETTINGS,
    SHOW,
    SIMILAR_TO,
    SOME,
    SORT_BY,
    START_WITH,
    STRUCT,
    TABLE_SAMPLE,
    TEMPORARY,
    TOP,
    THEN,
    TRUE,
    UNCACHE,
    UNION,
    UNNEST,
    UNPIVOT,
    UPDATE,
    USE,
    USING,
    VALUES,
    VIEW,
    VOLATILE,
    WHEN,
    WHERE,
    WINDOW,
    WITH,
    UNIQUE,
    VERSION_SNAPSHOT,
    TIMESTAMP_SNAPSHOT,
}

#[pymethods]
impl TokenType {
    #[pyo3(name = "__repr__")]
    fn python_repr(&self) -> PyResult<String> {
        Ok(format!("{:?}", self))
    }
}

#[derive(Debug)]
#[pyclass]
pub struct Token {
    #[pyo3(get)]
    pub token_type: TokenType,
    #[pyo3(get)]
    pub text: String,
    #[pyo3(get)]
    pub line: usize,
    #[pyo3(get)]
    pub column: usize,
    #[pyo3(get)]
    pub start: usize,
    #[pyo3(get)]
    pub end: usize,
    #[pyo3(get)]
    pub comments: Vec<String>,
}

impl Token {
    pub fn new(
        token_type: TokenType,
        text: String,
        line: usize,
        column: usize,
        start: usize,
        end: usize,
        comments: Vec<String>,
    ) -> Token {
        Token {
            token_type,
            text,
            line,
            column,
            start,
            end,
            comments,
        }
    }

    pub fn append_comments(&mut self, comments: &mut Vec<String>) {
        self.comments.append(comments);
    }
}

#[pymethods]
impl Token {
    #[pyo3(name = "__repr__")]
    fn python_repr(&self) -> PyResult<String> {
        Ok(format!("{:?}", self))
    }
}
